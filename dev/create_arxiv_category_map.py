#!/usr/bin/env python3
"""
Create arxiv_category_map.yaml with essential ArXiv category mappings
based on common categories found in ArXiv CC licensed papers.
"""
# Standard library
import os
import sys

# Third-party
import yaml

# Add parent directory for shared imports
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "scripts"))

# First-party/Local
import shared  # noqa: E402


def create_arxiv_category_mapping():
    """Fetch ArXiv category mappings from API."""

    # Import shared module to use the comprehensive mapping
    try:
        categories = shared.get_arxiv_categories()
        if categories:
            return categories
    except Exception as e:
        print(f"Failed to get categories: {e}")

    # Fallback to essential categories if API fails 
    # Covering the most common ArXiv categories 
    return {
        "cs.AI": "Computer Science - Artificial Intelligence",
        "cs.CL": "Computer Science - Computation and Language",
        "cs.CV": "Computer Science - Computer Vision and Pattern Recognition",
        "cs.LG": "Computer Science - Machine Learning",
        "physics.comp-ph": "Physics - Computational Physics",
        "math.CO": "Mathematics - Combinatorics",
        "stat.AP": "Statistics - Applications",
    }


def main():
    """Main function."""
    logger, paths = shared.setup(__file__)

    # Create category mapping
    categories = create_arxiv_category_mapping()

    # Output path
    output_path = os.path.join(paths["data"], "arxiv_category_map.yaml")

    try:
        # Add header comment
        header = [
            "# ArXiv category code to name mappings",
            "# Generated by dev/create_arxiv_category_map.py",
            "# Comprehensive ArXiv category taxonomy",
            "",
        ]

        with open(output_path, "w", encoding="utf-8") as f:
            f.write("\n".join(header))
            yaml.dump(categories, f, default_flow_style=False, sort_keys=True)

        logger.info(
            f"Created ArXiv category mapping: {output_path} "
            f"with {len(categories)} categories"
        )

    except Exception as e:
        logger.error(f"Failed to create category mapping: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
